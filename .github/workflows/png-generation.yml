name: Generate and Update PNG Icons

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write
  actions: write

env:
  LAST_COMMIT: ${{ vars.LAST_PROCESSED_COMMIT }}

jobs:
  check-and-generate-pngs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout your repository
      uses: actions/checkout@v2

    - name: Get latest commit from microsoft/fluentui-system-icons
      id: get_latest_commit
      run: |
        LATEST_COMMIT=$(curl -s "https://api.github.com/repos/microsoft/fluentui-system-icons/commits/main" | jq -r .sha)
        echo "latest_commit=$LATEST_COMMIT" >> $GITHUB_OUTPUT

    - name: Check if update is needed
      id: check_update
      run: |
        if [ -z "${{ env.LAST_COMMIT }}" ] || [ "${{ steps.get_latest_commit.outputs.latest_commit }}" != "${{ env.LAST_COMMIT }}" ]; then
          echo "update_needed=true" >> $GITHUB_OUTPUT
        else
          echo "update_needed=false" >> $GITHUB_OUTPUT
        fi

    - name: Checkout microsoft/fluentui-system-icons
      if: steps.check_update.outputs.update_needed == 'true'
      uses: actions/checkout@v2
      with:
        repository: microsoft/fluentui-system-icons
        path: fluentui-temp

    - name: Setup Node.js
      if: steps.check_update.outputs.update_needed == 'true'
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install dependencies
      if: steps.check_update.outputs.update_needed == 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y librsvg2-bin imagemagick

    - name: Generate PNGs
      if: steps.check_update.outputs.update_needed == 'true'
      run: |
        mkdir -p assets
        cd fluentui-temp/assets
        for icon_folder in */; do
          icon_name=${icon_folder%/}
          
          # Check if the icon folder has language subfolders
          if [ -d "$icon_folder/en" ]; then
            # Process language subfolders
            for lang_folder in "$icon_folder"*/; do
              lang=${lang_folder%/}
              lang=${lang##*/}
              
              if [ -d "$lang_folder/SVG" ]; then
                mkdir -p "../../assets/${icon_name}/${lang}"
                
                # Find the largest SVG size
                largest_size=$(find "${lang_folder}/SVG" -name "*.svg" | sed -E 's/.*_([0-9]+)_.*/\1/' | sort -rn | head -1)
                
                for svg_file in "${lang_folder}/SVG"/*_${largest_size}_*.svg; do
                  filename=$(basename "$svg_file" .svg)
                  # Remove the size from the filename
                  new_filename=$(echo "$filename" | sed -E 's/_[0-9]+_/_/')
                  for size in 16 32 64 128; do
                    rsvg-convert -w $size -h $size "$svg_file" | \
                    convert - -background none -gravity center -extent ${size}x${size} "../../assets/${icon_name}/${lang}/${new_filename}-${size}.png"
                  done
                done
              fi
            done
          else
            # Process icons without language subfolders
            if [ -d "$icon_folder/SVG" ]; then
              mkdir -p "../../assets/${icon_name}/png"
              
              # Find the largest SVG size
              largest_size=$(find "${icon_folder}/SVG" -name "*.svg" | sed -E 's/.*_([0-9]+)_.*/\1/' | sort -rn | head -1)
              
              for svg_file in "${icon_folder}/SVG"/*_${largest_size}_*.svg; do
                filename=$(basename "$svg_file" .svg)
                # Remove the size from the filename
                new_filename=$(echo "$filename" | sed -E 's/_[0-9]+_/_/')
                for size in 16 32 64 128; do
                  rsvg-convert -w $size -h $size "$svg_file" | \
                  convert - -background none -gravity center -extent ${size}x${size} "../../assets/${icon_name}/png/${new_filename}-${size}.png"
                done
              done
            fi
          fi
        done

    - name: Remove temporary files
      if: steps.check_update.outputs.update_needed == 'true'
      run: rm -rf fluentui-temp

    - name: Update last processed commit
      if: steps.check_update.outputs.update_needed == 'true'
      run: |
        echo "LAST_PROCESSED_COMMIT=${{ steps.get_latest_commit.outputs.latest_commit }}" >> $GITHUB_ENV

    - name: Commit and push changes
      if: steps.check_update.outputs.update_needed == 'true'
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git add assets
        git commit -m "ðŸŽ¨ Refresh PNG icons" || echo "ðŸ‘Œ All icons up-to-date, nothing to commit"
        git push

    - name: Update repository variable
      if: steps.check_update.outputs.update_needed == 'true'
      env:
        GH_TOKEN: ${{ secrets.PAT }}
      run: |
          gh api \
          --method PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ github.repository }}/actions/variables/LAST_PROCESSED_COMMIT \
           -f "name=LAST_PROCESSED_COMMIT" -f "value=${{ steps.get_latest_commit.outputs.latest_commit }}" \
